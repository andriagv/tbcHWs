import Foundation


// MARK: - task1
/* рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ CreatureType enum-рЃў рЃАрЃ«рЃЋрЃљрЃЊрЃљрЃАрЃ«рЃЋрЃљ рЃбрЃўрЃърЃўрЃА рЃљрЃарЃАрЃћрЃЉрЃћрЃЉрЃўрЃЌ (рЃЏрЃљрЃњ: fire, water, earth, air, electric Рђд). рЃњрЃљрЃЏрЃЮрЃўрЃДрЃћрЃюрЃћрЃЌ associated value, рЃарЃЮрЃЏ рЃЌрЃўрЃЌрЃЮрЃћрЃБрЃџ рЃбрЃўрЃърЃА рЃ░рЃЦрЃЮрЃюрЃЊрЃћрЃА rarity: Double рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЉрЃљ 0-рЃЊрЃљрЃю 1-рЃЏрЃЊрЃћ. рЃЊрЃљрЃљрЃЏрЃљрЃбрЃћрЃЌ computed property description, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЊрЃљрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃА рЃљрЃарЃАрЃћрЃЉрЃўрЃА рЃбрЃўрЃърЃўрЃА рЃљрЃдрЃгрЃћрЃарЃљрЃА.Рђе  */

enum CreatureType {
    case fire(rarity: Double)
    case water(rarity: Double)
    case earth(rarity: Double)
    case air(rarity: Double)
    case electric(rarity: Double)
    
    var description: String {
        switch self {
        case .fire(let rarity):
            return "рЃфрЃћрЃфрЃ«рЃџрЃў \(rarity)."
        case .water(let rarity):
            return "рЃгрЃДрЃљрЃџрЃў \(rarity)."
        case .earth(let rarity):
            return "рЃЏрЃўрЃгрЃљ \(rarity)."
        case .air(let rarity):
            return "рЃ░рЃљрЃћрЃарЃў \(rarity)."
        case .electric(let rarity):
            return "рЃљрЃЋрЃљрЃбрЃљрЃарЃА рЃЊрЃћрЃюрЃўрЃА рЃФрЃљрЃџрЃљ рЃљрЃарЃљрЃљрЃЦ рЃАрЃљрЃЏрЃгрЃБрЃ«рЃљрЃарЃЮрЃЊ \(rarity)."
        }
    }
}



// MARK: - task2
/* рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃърЃарЃЮрЃбрЃЮрЃЎрЃЮрЃџрЃў CreatureStats рЃерЃћрЃЏрЃЊрЃћрЃњрЃў рЃЏрЃЮрЃЌрЃ«рЃЮрЃЋрЃюрЃћрЃЉрЃўрЃЌ:
 * var health: Double
 * var attack: Double
 * var defense: Double
 * func updateStats(health: Double, attack: Double, defense: Double) рЃЏрЃћрЃЌрЃЮрЃЊрЃў, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃњрЃљрЃюрЃљрЃљрЃ«рЃџрЃћрЃЉрЃА рЃљрЃЏ рЃЏрЃЮрЃюрЃљрЃфрЃћрЃЏрЃћрЃЉрЃА (рЃерЃћрЃњрЃўрЃФрЃџрЃўрЃљрЃЌ рЃцрЃБрЃюрЃЦрЃфрЃўрЃўрЃА рЃърЃљрЃарЃљрЃЏрЃћрЃбрЃарЃћрЃЉрЃў рЃАрЃБрЃарЃЋрЃўрЃџрЃўрЃАрЃљрЃЏрЃћрЃЉрЃа рЃерЃћрЃфрЃЋрЃљрЃџрЃЮрЃЌ, рЃЏрЃљрЃњ: рЃЊрЃћрЃцрЃЮрЃџрЃб рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЉрЃћрЃЉрЃў рЃњрЃљрЃБрЃгрЃћрЃарЃЮрЃЌ ­Ъўї)Рђе */

protocol CreatureStats {
    var health: Double { get set}
    var attack: Double { get set}
    var defense: Double { get set}
    
    mutating func updateStats(health: Double, attack: Double, defense: Double)
}

extension CreatureStats {
    mutating func updateStats(health: Double = 100.0, attack: Double = 100.0, defense: Double = 100.0) {
        self.health = health
        self.attack = attack
        self.defense = defense
    }
}


// MARK: - task3
/* рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃЎрЃџрЃљрЃАрЃў Trainer рЃерЃћрЃЏрЃЊрЃћрЃњрЃў рЃцрЃарЃЮрЃцрЃћрЃарЃЌрЃћрЃЉрЃўрЃЌ:
 * public let name: String
 * private var creatures: [DigitalCreature]
 * рЃЊрЃљрЃљрЃЏрЃљрЃбрЃћрЃЌ public рЃЏрЃћрЃЌрЃЮрЃЊрЃў add(creature: DigitalCreature) рЃарЃЮрЃЏрЃџрЃўрЃЌрЃљрЃф рЃерЃћрЃФрЃџрЃћрЃЉрЃЌ рЃљрЃ«рЃљрЃџрЃў рЃљрЃарЃАрЃћрЃЉрЃўрЃА рЃЊрЃљрЃЏрЃљрЃбрЃћрЃЉрЃљрЃА рЃЏрЃљрЃАрЃўрЃЋрЃерЃў, рЃљрЃАрЃћрЃЋрЃћ рЃљрЃарЃАрЃћрЃЉрЃљрЃА рЃАрЃљрЃЎрЃБрЃЌрЃљрЃа рЃЌрЃљрЃЋрЃА (self) рЃЊрЃљрЃБрЃАрЃћрЃбрЃљрЃЋрЃА рЃбрЃарЃћрЃюрЃћрЃарЃљрЃЊ. */

class Trainer {
    public let name: String
    private var creatures: [DigitalCreature]

    init(name: String, creatures: [DigitalCreature]) {
        self.name = name
        self.creatures = creatures
    }
    
    init(name: String) {
        self.name = name
        self.creatures = []
    }

    public func add(creature: DigitalCreature) {
        creatures.append(creature)
        creature.trainer = self
    }
}

// MARK: - task4
/* рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃЎрЃџрЃљрЃАрЃў DigitalCreature, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЊрЃљрЃљрЃЎрЃЏрЃљрЃДрЃЮрЃцрЃўрЃџрЃћрЃЉрЃА CreatureStats рЃърЃарЃЮрЃбрЃЮрЃЎрЃЮрЃџрЃА. рЃЊрЃљрЃљрЃЏрЃљрЃбрЃћрЃЌ:
 * public let name: String
 * public let type: CreatureType
 * public var level: Int
 * public var experience: Double
 * weak public var trainer: Trainer?
 * рЃЊрЃљрЃљрЃЏрЃљрЃбрЃћрЃЌ deinit рЃЏрЃћрЃЌрЃЮрЃЊрЃў, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЊрЃљрЃЉрЃћрЃГрЃЊрЃљрЃЋрЃА рЃерЃћрЃбрЃДрЃЮрЃЉрЃўрЃюрЃћрЃЉрЃљрЃА рЃљрЃарЃАрЃћрЃЉрЃўрЃА рЃгрЃљрЃерЃџрЃўрЃАрЃљрЃА.Рђе */

class DigitalCreature: CreatureStats {
    public let name: String
    public let type: CreatureType
    public var level: Int
    public var experience: Double
    weak public var trainer: Trainer?
    
    var health: Double
    var attack: Double
    var defense: Double
    
    init(name: String, type: CreatureType, level: Int, experience: Double, health: Double, attack: Double, defense: Double) {
        self.name = name
        self.type = type
        self.level = level
        self.experience = experience
        self.health = health
        self.attack = attack
        self.defense = defense
    }
    
    deinit {
        print(" рЃљрЃарЃАрЃћрЃЉрЃљ рЃгрЃљрЃўрЃерЃљрЃџрЃљ ")
    }
}


// MARK: - task5
/*  рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ CreatureManager рЃЎрЃџрЃљрЃАрЃў рЃерЃћрЃЏрЃЊрЃћрЃњрЃў рЃцрЃБрЃюрЃЦрЃфрЃўрЃЮрЃюрЃљрЃџрЃўрЃЌ:
 * private var creatures: [DigitalCreature] - рЃљрЃарЃАрЃћрЃЉрЃћрЃЉрЃўрЃА рЃЏрЃљрЃАрЃўрЃЋрЃў
 * public func adoptCreature(_ creature: DigitalCreature) - рЃљрЃарЃАрЃћрЃЉрЃўрЃА рЃЊрЃљрЃЏрЃљрЃбрЃћрЃЉрЃљ
 * public func trainCreature(named name: String) - рЃЎрЃЮрЃюрЃЎрЃарЃћрЃбрЃБрЃџрЃў рЃљрЃарЃАрЃћрЃЉрЃўрЃА рЃгрЃЋрЃарЃЌрЃюрЃљ (рЃњрЃљрЃўрЃЌрЃЋрЃљрЃџрЃўрЃАрЃгрЃўрЃюрЃћрЃЌ рЃарЃЮрЃЏ рЃгрЃЋрЃарЃЌрЃюрЃљ рЃЏрЃЮрЃ«рЃЊрЃћрЃЉрЃљ рЃЏрЃ«рЃЮрЃџрЃЮрЃЊ рЃЏрЃљрЃерЃўрЃю рЃЌрЃБ рЃљрЃарЃЕрЃћрЃБрЃџ рЃљрЃарЃАрЃћрЃЉрЃљрЃА рЃДрЃљрЃЋрЃА рЃЏрЃгрЃЋрЃарЃЌрЃюрЃћрЃџрЃў!)
 * public func listCreatures() -> [DigitalCreature] - рЃДрЃЋрЃћрЃџрЃљ рЃљрЃарЃАрЃћрЃЉрЃўрЃА рЃАрЃўрЃўрЃА рЃЊрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃљРђеРђерЃњрЃљрЃљрЃцрЃљрЃарЃЌрЃЮрЃЋрЃћрЃЌ CreatureManage рЃЎрЃџрЃљрЃАрЃў рЃЏрЃћрЃЌрЃЮрЃЊрЃўрЃЌ func trainAllCreatures(), рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃњрЃљрЃгрЃЋрЃарЃЌрЃюрЃўрЃА рЃДрЃЋрЃћрЃџрЃљ рЃљрЃарЃАрЃћрЃЉрЃљрЃА.Рђе */

class CreatureManager {
    private var creatures: [DigitalCreature]
    
    init(creatures: [DigitalCreature]) {
        self.creatures = []
    }
    
    public func adoptCreature(_ creature: DigitalCreature) {
        creatures.append(creature)
    }
    
    public func trainCreature(named name: String) {
        if creatures.contains(where: { $0.name == name }) {
            creatures.reduce(into: ()) { (result, creature) in
                if creature.name == name {
                    if creature.trainer != nil {
                        creature.level += 1
                        creature.experience += 1
                        print("рЃњрЃўрЃфрЃЮрЃфрЃљрЃЋ, рЃњрЃљрЃўрЃгрЃЋрЃарЃЌрЃЋрЃюрЃљ: \(creature.name) рЃЏрЃўрЃАрЃў рЃљрЃЏрЃЪрЃљрЃЏрЃўрЃюрЃЊрЃћрЃџрЃў рЃЏрЃЮрЃюрЃљрЃфрЃћрЃЏрЃћрЃЉрЃў: Level: \(creature.level), Experience: \(creature.experience)")
                    } else {
                        print("\(creature.name)-рЃА рЃљрЃа рЃДрЃљрЃЋрЃА рЃбрЃарЃћрЃюрЃћрЃарЃў рЃЊрЃљ рЃЋрЃћрЃа рЃњрЃљрЃўрЃгрЃЋрЃарЃЌрЃюрЃћрЃЉрЃљ")
                    }
                    print("\n")
                }
            }
        } else {
            print("\(name): рЃљрЃАрЃћрЃЌрЃў рЃљрЃарЃАрЃћрЃЉрЃљ рЃЋрЃћрЃа рЃЏрЃЮрЃўрЃФрЃћрЃЉрЃюрЃљ.")
        }
    }
    
    public func listCreatures() -> [DigitalCreature] {
        creatures
    }
}

extension CreatureManager {
    public func trainAllCreatures() {
        for creature in creatures {
            if creature.trainer != nil {
                creature.level += 1
                creature.experience += 1
            } else {
                continue
            }
        }
    }
}



// MARK: - task6
/* рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ CreatureShop рЃЎрЃџрЃљрЃАрЃў рЃЏрЃћрЃЌрЃЮрЃЊрЃўрЃЌ purchaseRandomCreature() -> DigitalCreature. рЃћрЃА рЃЏрЃћрЃЌрЃЮрЃЊрЃў рЃЊрЃљрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃА рЃарЃљрЃюрЃЊрЃЮрЃЏрЃўрЃќрЃўрЃарЃћрЃЉрЃБрЃџрЃљрЃЊ рЃЊрЃљрЃњрЃћрЃюрЃћрЃарЃўрЃарЃћрЃЉрЃБрЃџ рЃљрЃарЃАрЃћрЃЉрЃљрЃА.Рђе  */

class CreatureShop {
    private func generateRandomName() -> String {
        let alphabet = Array("abcdefghijklmnopqrstuvwxyz")
        let nameLength = Int.random(in: 2...10)
        var randomName = ""
        
        while randomName.count < nameLength {
            randomName.append(alphabet.randomElement() ?? "a")
        }
        
        return randomName
    }

    public func purchaseRandomCreature() -> DigitalCreature {
        let Name = generateRandomName()
        let creatureTypes: [CreatureType] = [
            .fire(rarity: Double.random(in: 0...1)),
            .water(rarity: Double.random(in: 0...1)),
            .earth(rarity: Double.random(in: 0...1)),
            .air(rarity: Double.random(in: 0...1)),
            .electric(rarity: Double.random(in: 0...1))
        ]
        let Type = creatureTypes.randomElement()!
        let Level = Int.random(in: 1...100)
        let Experience = Double.random(in: 1...100)
        let Health = Double.random(in: 1...100)
        let Attack = Double.random(in: 1...100)
        let Defense = Double.random(in: 1...100)
        
        return DigitalCreature(name: Name, type: Type, level: Level, experience: Experience, health: Health, attack: Attack, defense: Defense)
    }
}


// MARK: - task7
/*
рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃњрЃџрЃЮрЃЉрЃљрЃџрЃБрЃарЃў рЃцрЃБрЃюрЃЦрЃфрЃўрЃљ updateLeaderboard(players: [CreatureManager]) -> [CreatureManager], рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЊрЃљрЃљрЃџрЃљрЃњрЃћрЃЉрЃА рЃЏрЃЮрЃЌрЃљрЃЏрЃљрЃерЃћрЃћрЃЉрЃА рЃЏрЃљрЃЌрЃў рЃљрЃарЃАрЃћрЃЉрЃћрЃЉрЃўрЃА рЃ»рЃљрЃЏрЃБрЃарЃў рЃФрЃљрЃџрЃўрЃА рЃЏрЃўрЃ«рЃћрЃЊрЃЋрЃўрЃЌ. Рђе
 */

func updateLeaderboard(players: [CreatureManager]) -> [CreatureManager] {
    func totalPower(of manager: CreatureManager) -> Double {
        manager.listCreatures().reduce(0) { $0 + $1.attack + $1.defense + $1.health }
    }
    
    return players.sorted { totalPower(of: $0) > totalPower(of: $1) }
}



// MARK: - task8
// рЃњрЃљрЃЏрЃЮрЃЋрЃўрЃДрЃћрЃюрЃЮрЃЌ рЃгрЃўрЃюрЃљ рЃбрЃљрЃАрЃЎрЃћрЃЉрЃерЃў рЃерЃћрЃЦрЃЏрЃюрЃўрЃџрЃў рЃДрЃЋрЃћрЃџрЃљ рЃцрЃБрЃюрЃЦрЃфрЃўрЃЮрЃюрЃљрЃџрЃў:
// 1* рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃарЃљрЃЏрЃЊрЃћрЃюрЃўрЃЏрЃћ Trainer рЃЮрЃЉрЃўрЃћрЃЦрЃбрЃў
// 2* рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃарЃљрЃЏрЃЊрЃћрЃюрЃўрЃЏрЃћ CreatureManager рЃЮрЃЉрЃўрЃћрЃЦрЃбрЃў
// 3* рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃћрЃарЃЌрЃў рЃљрЃю рЃЮрЃарЃў CreatureShop
// 4* рЃЌрЃўрЃЌрЃЮрЃћрЃБрЃџрЃў рЃЏрЃћрЃюрЃћрЃ»рЃћрЃарЃўрЃАрЃЌрЃЋрЃўрЃА:
//     41* рЃерЃћрЃўрЃФрЃўрЃюрЃћрЃЌ рЃарЃљрЃЏрЃЊрЃћрЃюрЃўрЃЏрЃћ рЃерЃћрЃЏрЃЌрЃ«рЃЋрЃћрЃЋрЃўрЃЌрЃў рЃљрЃарЃАрЃћрЃЉрЃљ CreatureShop-рЃўрЃЊрЃљрЃю
//     42* рЃЏрЃўрЃљрЃЉрЃљрЃарЃћрЃЌ рЃарЃљрЃЏрЃЊрЃћрЃюрЃўрЃЏрЃћ рЃљрЃарЃАрЃћрЃЉрЃљ рЃарЃЮрЃЏрЃћрЃџрЃўрЃЏрЃћ рЃбрЃарЃћрЃюрЃћрЃарЃА.
//     43* рЃАрЃфрЃљрЃЊрЃћрЃЌ рЃљрЃарЃАрЃћрЃЉрЃћрЃЉрЃўрЃА рЃгрЃЋрЃарЃЌрЃюрЃљ CreatureManager-рЃўрЃА trainCreature(named:) рЃЏрЃћрЃЌрЃЮрЃЊрЃўрЃЌ
// 5* рЃњрЃљрЃЏрЃЮрЃўрЃДрЃћрЃюрЃћрЃЌ CreatureManager-рЃўрЃА trainAllCreatures() рЃЏрЃћрЃЌрЃЮрЃЊрЃў рЃДрЃЋрЃћрЃџрЃљ рЃЏрЃЮрЃЌрЃљрЃЏрЃљрЃерЃўрЃА рЃљрЃарЃАрЃћрЃЉрЃћрЃЉрЃўрЃА рЃАрЃљрЃгрЃЋрЃарЃЌрЃюрЃћрЃџрЃљрЃЊ (рЃЌрЃБ рЃДрЃљрЃЋрЃА рЃЏрЃгрЃЋрЃарЃЌрЃюрЃћрЃџрЃў, рЃарЃљ рЃЌрЃЦрЃЏрЃљ рЃБрЃюрЃЊрЃљ)
// 6* рЃњрЃљрЃюрЃљрЃљрЃ«рЃџрЃћрЃЌ рЃџрЃўрЃЊрЃћрЃарЃЉрЃЮрЃарЃЊрЃў updateLeaderboard() рЃцрЃБрЃюрЃЦрЃфрЃўрЃўрЃА рЃњрЃљрЃЏрЃЮрЃДрЃћрЃюрЃћрЃЉрЃўрЃЌ
// 7* рЃЊрЃљрЃЉрЃћрЃГрЃЊрЃћрЃЌ рЃЌрЃўрЃЌрЃЮрЃћрЃБрЃџрЃў рЃЏрЃЮрЃЌрЃљрЃЏрЃљрЃерЃўрЃА рЃљрЃарЃАрЃћрЃЉрЃћрЃЉрЃўрЃА рЃАрЃўрЃљ рЃЊрЃљ рЃЏрЃљрЃЌрЃў рЃАрЃбрЃљрЃбрЃўрЃАрЃбрЃўрЃЎрЃљ
// 8* рЃгрЃљрЃерЃљрЃџрЃћрЃЌ рЃћрЃарЃЌрЃў рЃљрЃарЃАрЃћрЃЉрЃљ рЃарЃЮрЃЏрЃћрЃџрЃўрЃЏрЃћ Trainer-рЃўрЃЊрЃљрЃю рЃЊрЃљ рЃљрЃЕрЃЋрЃћрЃюрЃћрЃЌ, рЃарЃЮрЃЏ weak reference рЃЏрЃБрЃерЃљрЃЮрЃЉрЃА рЃАрЃгрЃЮрЃарЃљрЃЊ (рЃЊрЃљрЃЉрЃћрЃГрЃЊрЃћрЃЌ рЃљрЃарЃАрЃћрЃЉрЃўрЃА trainer property-рЃА рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЉрЃљ рЃгрЃљрЃерЃџрЃљрЃЏрЃЊрЃћ рЃЊрЃљ рЃгрЃљрЃерЃџрЃўрЃА рЃерЃћрЃЏрЃЊрЃћрЃњ)
// 9* рЃЊрЃљрЃљрЃЎрЃЋрЃўрЃарЃЊрЃўрЃЌ deinit рЃЏрЃћрЃЌрЃЮрЃЊрЃўрЃА рЃњрЃљрЃЏрЃЮрЃФрЃљрЃ«рЃћрЃЉрЃљрЃА рЃљрЃарЃАрЃћрЃЉрЃўрЃА рЃгрЃљрЃерЃџрЃўрЃАрЃљрЃАРђе

// 1рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃарЃљрЃЏрЃЊрЃћрЃюрЃўрЃЏрЃћ Trainer рЃЮрЃЉрЃўрЃћрЃЦрЃбрЃў
var trainer1: Trainer? = Trainer(name: "trainer1")
var trainer2: Trainer? = Trainer(name: "trainer2")

// 2рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃарЃљрЃЏрЃЊрЃћрЃюрЃўрЃЏрЃћ CreatureManager рЃЮрЃЉрЃўрЃћрЃЦрЃбрЃў
var manager1 = CreatureManager(creatures: [])
var manager2 = CreatureManager(creatures: [])

// 3рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ рЃћрЃарЃЌрЃў рЃљрЃю рЃЮрЃарЃў CreatureShop
var shop1 = CreatureShop()
var shop2 = CreatureShop()

// 41рЃерЃћрЃўрЃФрЃўрЃюрЃћрЃЌ рЃарЃљрЃЏрЃЊрЃћрЃюрЃўрЃЏрЃћ рЃерЃћрЃЏрЃЌрЃ«рЃЋрЃћрЃЋрЃўрЃЌрЃў рЃљрЃарЃАрЃћрЃЉрЃљ CreatureShop-рЃўрЃЊрЃљрЃю
var creature1 = shop1.purchaseRandomCreature()
var creature2 = shop1.purchaseRandomCreature()
var creature3 = shop2.purchaseRandomCreature()
var creature4 = shop2.purchaseRandomCreature()
var creature5 = shop2.purchaseRandomCreature()

// рЃЏрЃћрЃюрЃћрЃ»рЃћрЃарЃћрЃЉрЃўрЃАрЃЌрЃЋрЃўрЃА рЃљрЃарЃАрЃћрЃЉрЃћрЃЉрЃўрЃА рЃЏрЃўрЃЉрЃЏрЃљ
manager1.adoptCreature(creature1)
manager1.adoptCreature(creature2)
manager2.adoptCreature(creature3)
manager2.adoptCreature(creature4)
manager2.adoptCreature(creature5)


//42 рЃЏрЃўрЃљрЃЉрЃљрЃарЃћрЃЌ рЃарЃљрЃЏрЃЊрЃћрЃюрЃўрЃЏрЃћ рЃљрЃарЃАрЃћрЃЉрЃљ рЃарЃЮрЃЏрЃћрЃџрЃўрЃЏрЃћ рЃбрЃарЃћрЃюрЃћрЃарЃА
trainer1?.add(creature: creature1)
trainer2?.add(creature: creature3)
trainer2?.add(creature: creature5)

// 43 рЃАрЃфрЃљрЃЊрЃћрЃЌ рЃљрЃарЃАрЃћрЃЉрЃћрЃЉрЃўрЃА рЃгрЃЋрЃарЃЌрЃюрЃљ CreatureManager-рЃўрЃА trainCreature(named:) рЃЏрЃћрЃЌрЃЮрЃЊрЃўрЃЌ
manager1.trainCreature(named: creature1.name)
manager1.trainCreature(named: creature2.name)
manager2.trainCreature(named: creature3.name)
manager2.trainCreature(named: creature4.name)
manager2.trainCreature(named: creature5.name)

// 5 рЃњрЃљрЃЏрЃЮрЃўрЃДрЃћрЃюрЃћрЃЌ CreatureManager-рЃўрЃА trainAllCreatures() рЃЏрЃћрЃЌрЃЮрЃЊрЃў рЃДрЃЋрЃћрЃџрЃљ рЃЏрЃЮрЃЌрЃљрЃЏрЃљрЃерЃўрЃА рЃљрЃарЃАрЃћрЃЉрЃћрЃЉрЃўрЃА рЃАрЃљрЃгрЃЋрЃарЃЌрЃюрЃћрЃџрЃљрЃЊ
manager1.trainAllCreatures()
manager2.trainAllCreatures()

// 6 рЃњрЃљрЃюрЃљрЃљрЃ«рЃџрЃћрЃЌ рЃџрЃўрЃЊрЃћрЃарЃЉрЃЮрЃарЃЊрЃў updateLeaderboard() рЃцрЃБрЃюрЃЦрЃфрЃўрЃўрЃА рЃњрЃљрЃЏрЃЮрЃДрЃћрЃюрЃћрЃЉрЃўрЃЌ
let leaderboard = updateLeaderboard(players: [manager1, manager2])

// 7 рЃЊрЃљрЃЉрЃћрЃГрЃЊрЃћрЃЌ рЃЌрЃўрЃЌрЃЮрЃћрЃБрЃџрЃў рЃЏрЃЮрЃЌрЃљрЃЏрЃљрЃерЃўрЃА рЃљрЃарЃАрЃћрЃЉрЃћрЃЉрЃўрЃА рЃАрЃўрЃљ рЃЊрЃљ рЃЏрЃљрЃЌрЃў рЃАрЃбрЃљрЃбрЃўрЃАрЃбрЃўрЃЎрЃљ
print("\n")
print("Leaderboard: \n")
for (index, manager) in leaderboard.enumerated() {
    print("Player \(index + 1): \(manager.listCreatures().count) creatures \n")
    manager.listCreatures().forEach { creature in
        print("\(creature.name) - Type: \(creature.type.description), Level: \(creature.level), Stats: (Health: \(creature.health), Attack: \(creature.attack), Defense: \(creature.defense)) ")
    }
    print("\n")
}


// 8 рЃгрЃљрЃерЃљрЃџрЃћрЃЌ рЃћрЃарЃЌрЃў рЃљрЃарЃАрЃћрЃЉрЃљ рЃарЃЮрЃЏрЃћрЃџрЃўрЃЏрЃћ Trainer-рЃўрЃЊрЃљрЃю рЃЊрЃљ рЃљрЃЕрЃЋрЃћрЃюрЃћрЃЌ, рЃарЃЮрЃЏ weak reference рЃЏрЃБрЃерЃљрЃЮрЃЉрЃА рЃАрЃгрЃЮрЃарЃљрЃЊ (рЃЊрЃљрЃЉрЃћрЃГрЃЊрЃћрЃЌ рЃљрЃарЃАрЃћрЃЉрЃўрЃА trainer property-рЃА рЃЏрЃюрЃўрЃерЃЋрЃюрЃћрЃџрЃЮрЃЉрЃљ рЃгрЃљрЃерЃџрЃљрЃЏрЃЊрЃћ рЃЊрЃљ рЃгрЃљрЃерЃџрЃўрЃА рЃерЃћрЃЏрЃЊрЃћрЃњ)

print("\(String(describing: creature1.trainer?.name))")

trainer1 = nil
trainer2 = nil


print("\(String(describing: creature1.trainer?.name))")

// 9 deinit рЃЏрЃћрЃЌрЃЮрЃЊрЃўрЃА рЃњрЃљрЃЏрЃЮрЃФрЃљрЃ«рЃћрЃЉрЃљ рЃљрЃарЃАрЃћрЃЉрЃћрЃЉрЃўрЃА рЃгрЃљрЃерЃџрЃўрЃАрЃљрЃА
manager1.adoptCreature(creature1)  // This will trigger deinit when the creature is removed


// MARK: - BOUNS

// MARK: - task9
/* рЃерЃћрЃЦрЃЏрЃћрЃюрЃўрЃЌ BattleSimulator рЃЎрЃџрЃљрЃАрЃў, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЏрЃљрЃарЃЌрЃљрЃЋрЃА рЃЮрЃа DigitalCreature-рЃА рЃерЃЮрЃарЃўрЃА рЃЉрЃарЃФрЃЮрЃџрЃљрЃА.
 * рЃњрЃљрЃЏрЃЮрЃўрЃДрЃћрЃюрЃћрЃЌ weak/unowned рЃЏрЃўрЃЏрЃЌрЃўрЃЌрЃћрЃЉрЃџрЃћрЃЉрЃў рЃАрЃљрЃЌрЃљрЃюрЃљрЃЊрЃЮрЃЊ, рЃарЃљрЃЌрЃљ рЃЌрЃљрЃЋрЃўрЃЊрЃљрЃю рЃљрЃўрЃфрЃўрЃџрЃЮрЃЌ рЃћ.рЃг memory leak.
 * рЃЊрЃљрЃљрЃЏрЃљрЃбрЃћрЃЌ рЃЏрЃћрЃЌрЃЮрЃЊрЃў simulateBattle(between creature1: DigitalCreature, and creature2: DigitalCreature) -> DigitalCreature, рЃарЃЮрЃЏрЃћрЃџрЃўрЃф рЃЊрЃљрЃљрЃЉрЃарЃБрЃюрЃћрЃЉрЃА рЃњрЃљрЃЏрЃљрЃарЃ»рЃЋрЃћрЃЉрЃБрЃџрЃА. рЃЏрЃћрЃЌрЃЮрЃЊрЃўрЃА рЃџрЃЮрЃњрЃўрЃЎрЃљрЃА рЃарЃЮрЃњрЃЮрЃарЃА рЃњрЃљрЃљрЃЎрЃћрЃЌрЃћрЃЉрЃЌ рЃЌрЃЦрЃЋрЃћрЃюрЃА рЃцрЃљрЃюрЃбрЃљрЃќрЃўрЃљрЃќрЃћрЃљ рЃЊрЃљрЃЏрЃЮрЃЎрЃўрЃЊрЃћрЃЉрЃБрЃџрЃў ­ЪЎї
 * рЃњрЃљрЃЏрЃљрЃарЃЌрЃћрЃЌ рЃарЃљрЃЏрЃЊрЃћрЃюрЃўрЃЏрЃћ рЃЉрЃарЃФрЃЮрЃџрЃљ рЃЊрЃљ рЃЊрЃљрЃЉрЃћрЃГрЃЊрЃћрЃЌ рЃерЃћрЃЊрЃћрЃњрЃћрЃЉрЃў. ­Ъц║ */

class BattleSimulator {
    weak var creature1: DigitalCreature?
    weak var creature2: DigitalCreature?
    
    init(creature1: DigitalCreature? = nil, creature2: DigitalCreature? = nil) {
        self.creature1 = creature1
        self.creature2 = creature2
    }
    
    deinit {
        print("BattleSimulator deinited")
    }
    
    func simulateBattle(between creature1: DigitalCreature, and creature2: DigitalCreature) -> DigitalCreature {
        
        while creature1.health > 0 && creature2.health > 0 {
            
            if creature1.attack > creature2.defense {
                creature2.health -= creature1.attack - creature2.defense
            } else {
                continue
            }
            
            if creature2.attack > creature1.defense {
                creature1.health -= creature2.attack - creature1.defense
            } else {
                continue
            }
        }
        return creature1.health > 0 ? creature1 : creature2
    }
}



let creature11 = shop1.purchaseRandomCreature()
let creature22 = shop2.purchaseRandomCreature()
print(BattleSimulator().simulateBattle(between: creature11, and: creature22))






